import os
import streamlit as st
import plotly.io as pio
pio.templates.default = pio.templates["plotly_white"] # "plotly_white"
st.set_page_config(layout="wide")
dataset_name_mapping_all = {
    # "All Datasets": {
    #     "COVID19Proteomics": "COVID19 olink",
    #     "ALVEOLAR_metacelltype": "ALVEOLAR_metacelltype"
    # },
    "Subtyping Medical Datasets":   {
            "PPMI_FOR_ALIGNED_TIME_SERIES": "PPMI Clinical Measurements",
            "ADNI_FOR_ALIGNED_TIME_SERIES": "ADNI Clinical Measurements",
    },
    "Proteomics": {
        "NORM-COVID19Proteomics": "Proteomics COVID19 data",
    },
    # "EHR Data": {
    #     "MINMAX_MIMIC_ALLSAMPLES": "MIMIC III EHR data",
    # },
    "Single Cell RNA": {
        "NORM-ALVEOLAR_metacelltype": "whole lung scRNA-seq",
    },
}

combined_best_parameters = {
        'PPMI_FOR_ALIGNED_TIME_SERIES': [[1.25, -1.25, -1.25], 'metric=euclidean;alignment_regularisation=0.003;alignment_window_size=3;n_neighbors=10;min_dist=0.10;num_cores=16'],
        'ADNI_FOR_ALIGNED_TIME_SERIES': [[1.25, -1.25, -1.25], 'metric=cosine;alignment_regularisation=0.030;alignment_window_size=3;n_neighbors=10;min_dist=0.10;num_cores=16'],
        'NORM-ALVEOLAR_metacelltype': [[-1.25, -1.25, 1.25], 'metric=euclidean;alignment_regularisation=0.030;alignment_window_size=2;n_neighbors=05;min_dist=0.10;num_cores=16'],
        'NORM-COVID19Proteomics': [[-1.25, -1.25, 1.25], 'metric=cosine;alignment_regularisation=0.003;alignment_window_size=2;n_neighbors=10;min_dist=0.01;num_cores=16'],
        'MINMAX_MIMIC_ALLSAMPLES': [[-1.25, -1.25, 1.25], 'metric=euclidean;alignment_regularisation=0.003;alignment_window_size=3;n_neighbors=10;min_dist=0.01;num_cores=16'],
}

color_columns = {
        'PPMI_FOR_ALIGNED_TIME_SERIES': ['Subtypes'],
        'ADNI_FOR_ALIGNED_TIME_SERIES': ['Subtypes'],
        'NORM-ALVEOLAR_metacelltype': ['cell.type', 'metacelltype'],
        'NORM-COVID19Proteomics': ['Acuity_max'],
        'MINMAX_MIMIC_ALLSAMPLES': ['LAST_CAREUNIT'],
}

dataset_descriptions = {
   "PPMI_FOR_ALIGNED_TIME_SERIES": "The dataset contains multivariate time series data to monitor Parkinson's disease and is used for identification of subtypes. The data is obtained from Parkinsonâ€™s Progression Markers Initiative (PPMI) database.",
   "stemCellData": "The dataset presents the longitudinal changes in the expression of stem cell starting from iPSC cell.",
   "ADNI_FOR_ALIGNED_TIME_SERIES": "The dataset contains multivariate time series data to monitor Alzheimer's disease and is used for identification of subtypes. The data is obtained from Alzheimer's Disease Neuroimaging Initiative (ADNI) database.",
   "MIMIC_SYNTHETIC": "The dataset contains multi-variate electronic health records data to monitor patient's health. The data is obtained from Alzheimer's Disease Neuroimaging Initiative (ADNI) database.",
   "Heartbeat": "This dataset is publicly available at http://timeseriesclassification.com This dataset is derived from the PhysioNet/CinC Challenge 2016. Heart sound recordings were sourced from several contributors around the world, collected at either a clinical or nonclinical environment, from both healthy subjects and pathological patients. The heart sound recordings were collected from different locations on the body.", 
   "ECG5000": "This dataset is publicly available at http://timeseriesclassification.com The original dataset for ECG5000 is a 20-hour long ECG downloaded from Physionet. The name is BIDMC Congestive Heart Failure Database(chfdb) and it is record chf07.",  
   "NATOPS": "This dataset is publicly available at http://timeseriesclassification.com This data was originally part of a competition (Link Here) The data is generated by sensors on the hands, elbows, wrists and thumbs. The data are the x,y,z coordinates for each of the eight locations.",
   "Epilepsy": "This dataset is publicly available at http://timeseriesclassification.com The data was generated with healthy participants simulating the class activities of performed. Data was collected from 6 participants using a tri-axial accelerometer on the dominant wrist whilst conducting 4 different activities." 
}

metadata_descriptions = {
    "Subtypes": "Subtypes are subdivision of a heterogeneous disorders having similar characteristics such as disease progression, drug response and others. Heterogeneous disorders include Alzheimer's Disease, Parkinson's Disease and others.",
    "Default": "Self Explanatory"
}

st.header("Aligned-UMAP for Longitudinal Biomedical Datasets")
cols = st.columns(3)
input_dataset_modality = st.sidebar.selectbox('Select the dataset modality', list(dataset_name_mapping_all.keys()))
st.sidebar.info("***{}***".format(input_dataset_modality))
dataset_name_mapping =  dataset_name_mapping_all[input_dataset_modality]
all_available_datasets = list(dataset_name_mapping.keys()) 
input_dataset_name = st.sidebar.selectbox('Select the dataset', list(map(lambda x: dataset_name_mapping[x], all_available_datasets)))
rmapping = {j:i for i, j in dataset_name_mapping.items()}
st.sidebar.info("***{}***: {}".format(input_dataset_name, dataset_descriptions.get(rmapping[input_dataset_name], rmapping[input_dataset_name])))
reverse_dataset_name_mapping = {j:i for i, j in dataset_name_mapping.items()}
input_dataset_name = reverse_dataset_name_mapping.get(input_dataset_name) 
all_available_visualization_methods = ['umap_aligned', 'multidr']
input_visualization_method = "umap_aligned"
info_msg1 = st.sidebar.empty()
info_msg2 = st.sidebar.empty()
dataset_p = f"results_data/{input_dataset_name}/{input_visualization_method}/generated_data/"
from streamlit_downloadPaperResults import download_data
fname = f"results_data/{input_dataset_name}/{input_visualization_method}/generated_data/{input_dataset_name}_16.pickle"

if not os.path.exists(fname):# (not os.path.exists(dataset_p)) or (len(os.listdir(dataset_p)) == 0):
    info_msg2.warning("Click **Fetch data** to start exploring.")
    if st.sidebar.button("Fetch data"):
        with st.spinner('Wait for data to download...'):
            download_data(input_dataset_name)

if not os.path.exists(fname):
    st.stop()
else:
    info_msg2.success("Click tabs to visualize longitudinal patterns.")

color_column_list = color_columns[input_dataset_name]
from streamlit_apps import browsable_component, select, parameter_effect
from streamlit_multiapp import MultiApp
app = MultiApp()
params = { "input_dataset_name": input_dataset_name, "color_column_list": color_column_list,
           "combined_best_parameters": combined_best_parameters, 'metadata_descriptions': metadata_descriptions }
app.add_app("Home", select.app, params)
app.add_app("Browse Trajectory Plots", browsable_component.app, params)
app.add_app("Aligned UMAP Parameter Tuning", parameter_effect.app, params)
app.run()